import json
import sys
import datetime
import getpass

def generate_html(plan_json):
    timestamp = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    user = getpass.getuser()
    resource_changes = plan_json.get("resource_changes", [])
    grouped = {}

    for change in resource_changes:
        resource_type = change.get("type")
        grouped.setdefault(resource_type, []).append(change)

    html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Terraform Plan Summary</title>
    <style>
        body {{ font-family: 'Segoe UI', sans-serif; margin: 2em; background: #f4f6f9; color: #333; }}
        h1 {{ color: #2c3e50; }}
        .meta {{ font-size: 0.9em; color: #666; margin-bottom: 1em; }}
        .group {{ margin-bottom: 1.5em; }}
        .group-header {{
            background-color: #1a1a2e;
            color: #fff;
            padding: 10px;
            font-weight: bold;
            cursor: pointer;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 0.5em;
        }}
        th, td {{
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #e1e4e8;
        }}
        th {{ background-color: #f0f0f0; }}
        .action-create {{ background-color: #d4edda; color: #155724; font-weight: bold; padding: 2px 6px; border-radius: 4px; }}
        .resource-row:hover {{ background-color: #f9f9f9; }}
        .details {{ display: none; background: #fefefe; border: 1px solid #ddd; padding: 10px; font-family: monospace; white-space: pre-wrap; }}
        .toggle-btn {{
            cursor: pointer;
            color: #3498db;
            font-size: 0.85em;
            margin-left: 10px;
        }}
    </style>
    <script>
        function toggle(id) {{
            var el = document.getElementById(id);
            el.style.display = el.style.display === "none" ? "block" : "none";
        }}
    </script>
</head>
<body>
    <h1>Terraform Plan Summary</h1>
    <div class="meta">
        Generated by: <strong>{user}</strong><br/>
        Timestamp: <strong>{timestamp}</strong><br/>
        Total resources affected: <strong>{len(resource_changes)}</strong>
    </div>
"""

    for resource_type, changes in grouped.items():
        html += f"""<div class="group">
        <div class="group-header">{resource_type} ({len(changes)} resources)</div>
        <table>
            <thead>
                <tr>
                    <th>Resource Name</th>
                    <th>Action</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
        """
        for i, change in enumerate(changes):
            resource_name = change.get("name")
            actions = change.get("change", {}).get("actions", [])
            action_text = ", ".join(actions)
            action_class = "action-create" if "create" in actions else "action-update" if "update" in actions else "action-delete"
            detail_id = f"detail_{resource_type.replace(':', '_')}_{i}"

            html += f"""
                <tr class="resource-row">
                    <td>{resource_name}</td>
                    <td><span class="{action_class}">{action_text.upper()}</span></td>
                    <td><span class="toggle-btn" onclick="toggle('{detail_id}')">â–¶ View</span></td>
                </tr>
                <tr>
                    <td colspan="3"><div id="{detail_id}" class="details">{json.dumps(change, indent=2)}</div></td>
                </tr>
            """

        html += "</tbody></table></div>"

    html += "</body></html>"
    return html


if __name__ == "__main__":
    tf_json_path = sys.argv[1]
    html_output_path = sys.argv[2]

    with open(tf_json_path, "r") as f:
        tf_data = json.load(f)

    html = generate_html(tf_data)

    with open(html_output_path, "w") as f:
        f.write(html)
